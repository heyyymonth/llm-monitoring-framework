name: LLM Quality & Safety Monitor CI/CD

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        echo "üß™ Running LLM Quality & Safety monitoring tests..."
        python -m pytest tests/ -v
    
    - name: Test API server
      run: |
        echo "üöÄ Testing API server startup..."
        python -c "
        import sys
        try:
            from api.server import app
            print('‚úÖ API server imports successfully')
            print(f'‚úÖ API has {len(app.routes)} routes configured')
        except Exception as e:
            print(f'‚ùå API server test failed: {e}')
            sys.exit(1)
        "
    
    - name: Validate monitoring components
      run: |
        echo "üìä Validating monitoring components..."
        python -c "
        import sys
        try:
            from monitoring.models import LLMTrace, QualityMetrics, SafetyAssessment, CostMetrics
            from monitoring.quality import QualityMonitor
            from monitoring.cost import CostTracker
            print('‚úÖ All monitoring components import successfully')
        except Exception as e:
            print(f'‚ùå Component validation failed: {e}')
            sys.exit(1)
        "

  docker:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=pr
          type=raw,value=main,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=raw,value=latest,enable={{startsWith(github.ref, 'refs/tags/')}}

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        load: true

    - name: Test Docker container
      run: |
        echo "üê≥ Testing Docker container..."
        
        # Debug: Show all generated tags
        echo "Generated tags:"
        echo "${{ steps.meta.outputs.tags }}"
        
        # Get the first tag from the metadata
        IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        echo "Using image tag: $IMAGE_TAG"
        
        # Start container in background
        docker run -d --name test-container -p 8000:8000 $IMAGE_TAG python -m uvicorn api.server:app --host 0.0.0.0 --port 8000
        
        # Wait for container to start
        sleep 15
        
        # Test health endpoint
        if curl -f http://localhost:8000/health; then
          echo "‚úÖ Health check passed"
        else
          echo "‚ùå Health check failed. Container logs:"
          docker logs test-container
          exit 1
        fi
        
        # Clean up
        docker stop test-container
        docker rm test-container
        
        echo "‚úÖ Docker container test passed"

    - name: Push Docker image
      if: startsWith(github.ref, 'refs/tags/')
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max 