name: CI - Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov flake8 black isort

    - name: Code formatting check (Black)
      run: |
        black --check --diff .

    - name: Import sorting check (isort)
      run: |
        isort --check-only --diff .

    - name: Lint with flake8
      run: |
        # Stop build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run tests with coverage
      run: |
        python tests/run_tests.py --coverage

    - name: Upload coverage reports to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Test installation
      run: |
        pip install -e .
        python -c "import monitoring; print('✅ Package installation successful')"

    - name: Run integration examples
      run: |
        python examples/integrations/quick_test.py

  build:
    name: Build Validation
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools

    - name: Build package
      run: |
        python -m build

    - name: Verify build artifacts
      run: |
        ls -la dist/
        pip install dist/*.whl
        python -c "import monitoring; print('✅ Wheel installation successful')"

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Check for security vulnerabilities
      run: |
        safety check --json || true
        bandit -r . -f json || true

  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create Dockerfile
      run: |
        cat << 'EOF' > Dockerfile
        FROM python:3.11-slim

        WORKDIR /app
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt

        COPY . .
        RUN pip install -e .

        EXPOSE 8000 8080
        CMD ["python", "main.py"]
        EOF

    - name: Build Docker image
      run: |
        docker build -t llm-monitoring:test .

    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container -p 8000:8000 -p 8080:8080 llm-monitoring:test
        sleep 10
        docker logs test-container
        docker stop test-container || true 