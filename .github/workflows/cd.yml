name: CD - Deploy and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

jobs:
  test:
    name: Final Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run full test suite
      run: |
        python tests/run_tests.py

  build-and-publish:
    name: Build and Publish Package
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools twine

    - name: Build package
      run: |
        python -m build

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/* --skip-existing

  docker-deploy:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/llm-monitoring-framework
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Create Dockerfile
      run: |
        cat << 'EOF' > Dockerfile
        FROM python:3.11-slim

        WORKDIR /app
        
        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            gcc \
            && rm -rf /var/lib/apt/lists/*

        # Copy requirements and install Python dependencies
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt

        # Copy application code
        COPY . .
        RUN pip install -e .

        # Create directories for data and logs
        RUN mkdir -p data logs

        # Expose ports
        EXPOSE 8000 8080

        # Health check
        HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
          CMD curl -f http://localhost:8000/health || exit 1

        # Run the application
        CMD ["python", "main.py"]
        EOF

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## Changes in this Release
          
          üéâ **LLM Performance Monitoring Framework ${{ github.ref_name }}**
          
          ### üìã What's New
          - Performance improvements and bug fixes
          - Enhanced monitoring capabilities
          - Updated dependencies
          
          ### üöÄ Quick Start
          ```bash
          pip install llm-monitoring-framework==${{ github.ref_name }}
          ```
          
          ### üê≥ Docker
          ```bash
          docker pull ${{ secrets.DOCKER_USERNAME }}/llm-monitoring-framework:${{ github.ref_name }}
          ```
          
          ### üìñ Documentation
          - [Installation Guide](https://github.com/${{ github.repository }}#quick-start)
          - [API Documentation](https://github.com/${{ github.repository }}#usage)
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v1.0.0...${{ github.ref_name }}
        draft: false
        prerelease: false

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Generate documentation
      run: |
        pip install pdoc3
        pdoc --html --output-dir docs-html monitoring/

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs-html/monitoring
        destination_dir: api-docs 